{"ast":null,"code":"import { TasksDialogComponent } from '../tasks-dialog/tasks-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../sign-out.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../tasks.service\";\nimport * as i4 from \"ngx-cookie-service\";\nimport * as i5 from \"@angular/common\";\nfunction TasksComponent_div_8_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 13);\n    i0.ɵɵlistener(\"dragstart\", function TasksComponent_div_8_li_2_Template_li_dragstart_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const task_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onDragStart(task_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TasksComponent_div_8_li_2_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const task_r5 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.deleteTask(task_r5.taskId));\n    });\n    i0.ɵɵtext(3, \"X\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r5.description, \" \");\n  }\n}\nfunction TasksComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"ul\", 9);\n    i0.ɵɵtemplate(2, TasksComponent_div_8_li_2_Template, 4, 1, \"li\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.tasks);\n  }\n}\nfunction TasksComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 15);\n    i0.ɵɵtext(1, \"No tasks yet, let's add some!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TasksComponent_li_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 16);\n    i0.ɵɵlistener(\"dragover\", function TasksComponent_li_18_Template_li_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onDragOver($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TasksComponent_li_18_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const task_r10 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.deleteTask(task_r10.taskId, true));\n    });\n    i0.ɵɵtext(3, \"X\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const task_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r10.description, \" \");\n  }\n}\nexport let TasksComponent = /*#__PURE__*/(() => {\n  class TasksComponent {\n    constructor(signOutService, dialog, tasksService, cookieService) {\n      this.signOutService = signOutService;\n      this.dialog = dialog;\n      this.tasksService = tasksService;\n      this.cookieService = cookieService;\n      this.tasks = [];\n      this.doneTasks = [];\n      this.draggedTask = null;\n    }\n    //What happens when we open the tasks page. We get the Employee Id from the Cookie, \n    //and we populate the todo list\n    ngOnInit() {\n      this.tasksService.todoTasks$.subscribe(todoTasks => {\n        this.tasks = todoTasks;\n      });\n      this.tasksService.doneTasks$.subscribe(doneTasks => {\n        this.doneTasks = doneTasks;\n      });\n      this.employeeId = this.cookieService.get('session_user');\n      this.tasksService.fetchTasks(this.employeeId);\n      this.firstName = this.cookieService.get('name');\n    }\n    deleteTask(taskId, isCompletedTask = false) {\n      const confirmDelete = confirm(\"Are you sure you want to delete this task?\");\n      if (confirmDelete) {\n        this.tasksService.deleteTask(this.employeeId, taskId, isCompletedTask).subscribe(response => {\n          console.log(response);\n          this.tasksService.fetchTasks(this.employeeId);\n        }, error => {\n          console.error(error);\n        });\n      }\n    }\n    //Once we hit \"add task\" it will open the Dialog Box for the user to add Tasks\n    openDialog() {\n      const dialogRef = this.dialog.open(TasksDialogComponent, {\n        disableClose: true,\n        width: '800px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result === 'confirm') {\n          this.tasksService.fetchTasks(this.employeeId); // Refresh the task list after addition\n          console.log('Task List Refreshed');\n        }\n        error => {\n          console.error(error);\n        };\n      });\n    }\n    //Drag and Drop Functionality \n    onDragStart(task) {\n      console.log('onDragStart');\n      this.draggedTask = task;\n    }\n    onDrop(event, targetStatus) {\n      event.preventDefault();\n      console.log('onDragDrop');\n      if (this.draggedTask) {\n        // Check if the drop target is the same as the source\n        if (targetStatus === 'todo' && !this.draggedTask.isCompletedTask) {\n          // If the target is \"To-Do\" and the source was also \"To-Do\", re-order the tasks\n          const index = this.tasks.indexOf(this.draggedTask);\n          this.tasks.splice(index, 1); // Remove the task from the source\n          const dropIndex = this.getDropIndex(event);\n          this.tasks.splice(dropIndex, 0, this.draggedTask); // Insert the task at the new position\n        } else if (targetStatus === 'completed' && this.draggedTask.isCompletedTask) {\n          // If the target is \"Completed\" and the source was also \"Completed\", re-order the tasks\n          const index = this.doneTasks.indexOf(this.draggedTask);\n          this.doneTasks.splice(index, 1); // Remove the task from the source\n          const dropIndex = this.getDropIndex(event);\n          this.doneTasks.splice(dropIndex, 0, this.draggedTask); // Insert the task at the new position\n        } else {\n          // If the target status is different, perform the existing moveTaskToCompleted logic\n          const record = targetStatus === 'completed' ? this.doneTasks : this.tasks;\n          this.tasksService.moveTaskToCompleted(this.employeeId, this.draggedTask.taskId).subscribe(response => {\n            console.log(response);\n            // Refresh the task lists after moving the task\n            this.tasksService.fetchTasks(this.employeeId);\n          }, error => {\n            console.error(error);\n          });\n        }\n        this.draggedTask = null; // Reset draggedTask\n      }\n    }\n\n    onDragOver(event) {\n      console.log('onDragOver');\n      event.preventDefault();\n    }\n    // Helper function to determine the drop index based on mouse position\n    getDropIndex(event) {\n      const rect = event.currentTarget.getBoundingClientRect();\n      const mouseY = event.clientY - rect.top;\n      const itemHeight = 40; // Assuming a fixed height for each task item\n      return Math.floor(mouseY / itemHeight);\n    }\n    //Automatic Sign Out\n    ngOnDestroy() {\n      this.signOutService.signOut();\n      console.log('User signed out');\n    }\n    static #_ = this.ɵfac = function TasksComponent_Factory(t) {\n      return new (t || TasksComponent)(i0.ɵɵdirectiveInject(i1.SignOutService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.TasksService), i0.ɵɵdirectiveInject(i4.CookieService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TasksComponent,\n      selectors: [[\"app-tasks\"]],\n      decls: 19,\n      vars: 4,\n      consts: [[1, \"gray-box-1\"], [1, \"overlay-box\"], [1, \"container\"], [1, \"task-column\", \"to-do-tasks\", 3, \"dragover\", \"drop\"], [\"style\", \"background-color: #858CAB;\", \"class\", \"to-do\", 4, \"ngIf\", \"ngIfElse\"], [\"noTasks\", \"\"], [1, \"button-column\", \"add-delete-tasks\"], [3, \"click\"], [1, \"task-column\", \"completed-tasks\", 3, \"dragover\", \"drop\"], [2, \"background-color\", \"#858CAB\"], [\"draggable\", \"true\", 3, \"dragover\", 4, \"ngFor\", \"ngForOf\"], [1, \"to-do\", 2, \"background-color\", \"#858CAB\"], [\"draggable\", \"true\", 3, \"dragstart\", 4, \"ngFor\", \"ngForOf\"], [\"draggable\", \"true\", 3, \"dragstart\"], [1, \"delete-button\", 3, \"click\"], [1, \"tasks\", 2, \"background-color\", \"#2B2D33\", \"color\", \"aliceblue\", \"padding\", \"20px\", \"font-size\", \"16pt\", \"margin-bottom\", \"20px\"], [\"draggable\", \"true\", 3, \"dragover\"]],\n      template: function TasksComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1)(2, \"p\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3);\n          i0.ɵɵlistener(\"dragover\", function TasksComponent_Template_div_dragover_5_listener($event) {\n            return ctx.onDragOver($event);\n          })(\"drop\", function TasksComponent_Template_div_drop_5_listener($event) {\n            return ctx.onDrop($event, \"todo\");\n          });\n          i0.ɵɵelementStart(6, \"h2\");\n          i0.ɵɵtext(7, \"To-Do List\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, TasksComponent_div_8_Template, 3, 1, \"div\", 4);\n          i0.ɵɵtemplate(9, TasksComponent_ng_template_9_Template, 2, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 6)(12, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function TasksComponent_Template_button_click_12_listener() {\n            return ctx.openDialog();\n          });\n          i0.ɵɵtext(13, \"Add Task\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 8);\n          i0.ɵɵlistener(\"dragover\", function TasksComponent_Template_div_dragover_14_listener($event) {\n            return ctx.onDragOver($event);\n          })(\"drop\", function TasksComponent_Template_div_drop_14_listener($event) {\n            return ctx.onDrop($event, \"completed\");\n          });\n          i0.ɵɵelementStart(15, \"h2\");\n          i0.ɵɵtext(16, \"Completed\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"ul\", 9);\n          i0.ɵɵtemplate(18, TasksComponent_li_18_Template, 4, 1, \"li\", 10);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(10);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Hey \", ctx.firstName, \"! Let's get to Work!\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.tasks && ctx.tasks.length > 0)(\"ngIfElse\", _r1);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngForOf\", ctx.doneTasks);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf],\n      styles: [\".container[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto auto auto;gap:10px;width:90%;margin:auto}.gray-box-1[_ngcontent-%COMP%]{width:120px;height:120px;margin-left:5%;margin-top:-5%;background-color:#858cab;border:1pt solid #333439;position:absolute;box-shadow:0 8px 16px #0006}.overlay-box[_ngcontent-%COMP%]{background-color:#9b813a;width:48%;height:150px;margin-left:8%;margin-top:-3%;margin-bottom:3%;padding:40px 40px 40px 80px;border:1pt solid #8492A6;box-shadow:0 8px 16px #0006}.overlay-box[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#fff;font-size:40px;padding:10px;background-color:#9b813a;position:absolute}.task-column[_ngcontent-%COMP%]{border:1px solid white;padding:20px;width:100%}.button-column[_ngcontent-%COMP%]{padding:10px;border:1px solid white}.completed-tasks[_ngcontent-%COMP%]{background-color:#858cab}.add-delete-tasks[_ngcontent-%COMP%]{background-color:#858cab;width:40%;text-align:center;margin:auto}.add-delete-tasks[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{display:block;margin:10px auto 30px;padding:10px;font-size:14pt;background-color:#525668;color:#f0f8ff}.to-do-tasks[_ngcontent-%COMP%]{background-color:#858cab}h2[_ngcontent-%COMP%]{text-align:center;font-family:Josefin Slab,serif;background-color:#858cab;font-size:22pt;color:#f0f8ff}ul[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{background-color:#2b2d33;border-bottom:10px solid #858CAB;padding:20px;color:#f0f8ff;font-size:16pt}.delete-button[_ngcontent-%COMP%]{position:absolute;margin-top:-4%;margin-left:88%;background-color:#b6030399;color:#fff;border:none;border-radius:50%;width:15px;height:15px;font-weight:700;font-size:8pt;cursor:pointer;display:flex;align-items:center;justify-content:center}li[_ngcontent-%COMP%]{position:relative;margin-bottom:10px;background-color:#2b2d33}\"]\n    });\n  }\n  return TasksComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}